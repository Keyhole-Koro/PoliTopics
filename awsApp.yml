AWSTemplateFormatVersion: '2010-09-09'
Description: 'API Gateway with Lambda and DynamoDB integration, including a CloudWatch trigger.'

Resources:
  # DynamoDB Table
  MyDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: MyDataTable
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id 
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST  # On-demand billing mode

  # Lambda Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                Resource: !GetAtt MyDynamoDBTable.Arn
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/MyLambdaFunction:*'

  # Lambda Function
  MyLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: MyLambdaFunction
      Runtime: python3.9  # Change runtime if using another language
      Handler: index.handler  # Adjust if using a different handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          from datetime import datetime

          dynamo = boto3.client('dynamodb')
          TABLE_NAME = os.environ['TABLE_NAME']

          def handler(event, context):
              if 'Records' in event:  # CloudWatch Trigger
                  print("Scheduled event triggered")
              else:
                  # API Gateway Event
                  body = json.loads(event['body'])
                  item = {
                      'id': {'S': body['id']},
                      'timestamp': {'S': datetime.now().isoformat()},
                      'data': {'S': body['data']}
                  }
                  dynamo.put_item(TableName=TABLE_NAME, Item=item)
              return {
                  'statusCode': 200,
                  'body': json.dumps({'message': 'Success'})
              }
      Environment:
        Variables:
          TABLE_NAME: !Ref MyDynamoDBTable

  # API Gateway
  MyApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: MyApiGateway

  MyApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref MyApiGateway
      ParentId: !GetAtt MyApiGateway.RootResourceId
      PathPart: myresource

  MyApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref MyApiGateway
      ResourceId: !Ref MyApiGatewayResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
          - { LambdaArn: !GetAtt MyLambdaFunction.Arn }

  MyApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: MyApiGatewayMethod
    Properties:
      RestApiId: !Ref MyApiGateway
      StageName: prod

  # Permission for API Gateway to Invoke Lambda
  ApiGatewayInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt MyLambdaFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MyApiGateway}/*/POST/myresource'

  # CloudWatch Event Rule for Scheduled Lambda Trigger
  MyScheduledRule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: 'rate(5 minutes)'  # Change interval as needed
      Targets:
        - Arn: !GetAtt MyLambdaFunction.Arn
          Id: TargetFunctionV1

  # Permission for CloudWatch to Invoke Lambda
  LambdaInvokePermissionForEvents:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt MyLambdaFunction.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt MyScheduledRule.Arn

Outputs:
  ApiUrl:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${MyApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/myresource"
